// Generated by Haxe 4.1.1

#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter : global::haxe.lang.HxObject {
		
		static ColorConverter() {
			unchecked{
				#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
				global::haxe.lang.FieldLookup.addFields(new int[]{957002115}, new string[]{"registerMyMethods"});
			}
		}
		#line default
		
		public ColorConverter(global::haxe.lang.EmptyObject empty) {
		}
		
		
		public ColorConverter(global::maglev.MagLev maglev) {
			#line 11 "/my-component/src/colorconverter/ColorConverter.hx"
			global::colorconverter.ColorConverter.__hx_ctor_colorconverter_ColorConverter(this, maglev);
		}
		#line default
		
		protected static void __hx_ctor_colorconverter_ColorConverter(global::colorconverter.ColorConverter __hx_this, global::maglev.MagLev maglev) {
			#line 12 "/my-component/src/colorconverter/ColorConverter.hx"
			__hx_this.maglev = maglev;
			__hx_this.registerMyMethods();
		}
		#line default
		
		public global::maglev.MagLev maglev;
		
		public virtual void registerMyMethods() {
			#line 17 "/my-component/src/colorconverter/ColorConverter.hx"
			global::maglev.MagLev bus = this.maglev;
			#line 19 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.FromRGB", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_19__Fun(bus)));
			#line 30 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.FromCIELAB", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_30__Fun(bus)));
			#line 41 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.FromCMYK", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_41__Fun(bus)));
			#line 52 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.ConvertRGB", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_52__Fun(bus)));
			#line 63 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.ConvertCIELAB", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_63__Fun(bus)));
			#line 74 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.ConvertCMYK", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_74__Fun(bus)));
			#line 85 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.AddReferenceColorByRGB", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_85__Fun(bus)));
			#line 96 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.AddReferenceColorByCIELAB", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_96__Fun(bus)));
			#line 107 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.AddReferenceColorByCMYK", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_107__Fun(bus)));
			#line 118 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.FindReferenceColorByRGB", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_118__Fun(bus)));
			#line 129 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.FindReferenceColorByCIELAB", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_129__Fun(bus)));
			#line 140 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.FindReferenceColorByCMYK", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_140__Fun(bus)));
			#line 151 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.FindReferenceColor", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_151__Fun(bus)));
			#line 162 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.RemoveReferenceColorSystem", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_162__Fun(bus)));
			#line 173 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.GetReferenceColorSystems", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_173__Fun(bus)));
			#line 184 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.GetReferenceColors", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_184__Fun(bus)));
			#line 195 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.GetIlluminationObserverAngles", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_195__Fun(bus)));
			#line 206 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.SaveReferenceColors", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_206__Fun(bus)));
			#line 217 "/my-component/src/colorconverter/ColorConverter.hx"
			this.maglev.register("ColorConverter.LoadReferenceColors", global::maglev.MagLevFunction.fromFunction(new global::colorconverter.ColorConverter_registerMyMethods_217__Fun(bus)));
		}
		#line default
		
		public override object __hx_setField(string field, int hash, object @value, bool handleProperties) {
			unchecked {
				#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
				switch (hash) {
					case 858513194:
					{
						#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
						this.maglev = ((global::maglev.MagLev) (@value) );
						#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
						return @value;
					}
					
					
					default:
					{
						#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
						return base.__hx_setField(field, hash, @value, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_getField(string field, int hash, bool throwErrors, bool isCheck, bool handleProperties) {
			unchecked {
				#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
				switch (hash) {
					case 957002115:
					{
						#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
						return ((global::haxe.lang.Function) (new global::haxe.lang.Closure(this, "registerMyMethods", 957002115)) );
					}
					
					
					case 858513194:
					{
						#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
						return this.maglev;
					}
					
					
					default:
					{
						#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
						return base.__hx_getField(field, hash, throwErrors, isCheck, handleProperties);
					}
					
				}
				
			}
			#line default
		}
		
		
		public override object __hx_invokeField(string field, int hash, object[] dynargs) {
			unchecked {
				#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
				switch (hash) {
					case 957002115:
					{
						#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
						this.registerMyMethods();
						#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
						break;
					}
					
					
					default:
					{
						#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
						return base.__hx_invokeField(field, hash, dynargs);
					}
					
				}
				
				#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
				return null;
			}
			#line default
		}
		
		
		public override void __hx_getFields(global::Array<string> baseArr) {
			#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
			baseArr.push("maglev");
			#line 8 "/my-component/src/colorconverter/ColorConverter.hx"
			base.__hx_getFields(baseArr);
		}
		#line default
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_19__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_19__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 19 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 19 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 21 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.FromRGB"));
				#line 23 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 25 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.FromRGB\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 27 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_30__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_30__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 30 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 30 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 32 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.FromCIELAB"));
				#line 34 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 36 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.FromCIELAB\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 38 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_41__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_41__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 41 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 41 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 43 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.FromCMYK"));
				#line 45 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 47 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.FromCMYK\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 49 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_52__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_52__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 52 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 52 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 54 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.ConvertRGB"));
				#line 56 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 58 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.ConvertRGB\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 60 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_63__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_63__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 63 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 63 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 65 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.ConvertCIELAB"));
				#line 67 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 69 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.ConvertCIELAB\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 71 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_74__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_74__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 74 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 74 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 76 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.ConvertCMYK"));
				#line 78 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 80 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.ConvertCMYK\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 82 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_85__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_85__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 85 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 85 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 87 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.AddReferenceColorByRGB"));
				#line 89 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 91 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.AddReferenceColorByRGB\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 93 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_96__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_96__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 96 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 96 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 98 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.AddReferenceColorByCIELAB"));
				#line 100 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 102 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.AddReferenceColorByCIELAB\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 104 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_107__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_107__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 107 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 107 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 109 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.AddReferenceColorByCMYK"));
				#line 111 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 113 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.AddReferenceColorByCMYK\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 115 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_118__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_118__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 118 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 118 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 120 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.FindReferenceColorByRGB"));
				#line 122 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 124 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.FindReferenceColorByRGB\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 126 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_129__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_129__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 129 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 129 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 131 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.FindReferenceColorByCIELAB"));
				#line 133 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 135 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.FindReferenceColorByCIELAB\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 137 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_140__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_140__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 140 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 140 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 142 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.FindReferenceColorByCMYK"));
				#line 144 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 146 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.FindReferenceColorByCMYK\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 148 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_151__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_151__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 151 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 151 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 153 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.FindReferenceColor"));
				#line 155 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 157 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.FindReferenceColor\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 159 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_162__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_162__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 162 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 162 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 164 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.RemoveReferenceColorSystem"));
				#line 166 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 168 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.RemoveReferenceColorSystem\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 170 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_173__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_173__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 173 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 173 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 175 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.GetReferenceColorSystems"));
				#line 177 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 179 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.GetReferenceColorSystems\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 181 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_184__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_184__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 184 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 184 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 186 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.GetReferenceColors"));
				#line 188 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 190 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.GetReferenceColors\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 192 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_195__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_195__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 195 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 195 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 197 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.GetIlluminationObserverAngles"));
				#line 199 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 201 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.GetIlluminationObserverAngles\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 203 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_206__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_206__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 206 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 206 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 208 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.SaveReferenceColors"));
				#line 210 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 212 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.SaveReferenceColors\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 214 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}



#pragma warning disable 109, 114, 219, 429, 168, 162
namespace colorconverter {
	public class ColorConverter_registerMyMethods_217__Fun : global::haxe.lang.Function {
		
		public ColorConverter_registerMyMethods_217__Fun(global::maglev.MagLev bus) : base(1, 0) {
			#line 217 "/my-component/src/colorconverter/ColorConverter.hx"
			this.bus = bus;
		}
		#line default
		
		public override object __hx_invoke1_o(double __fn_float1, object __fn_dyn1) {
			unchecked {
				#line 217 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevArray args = ( (( __fn_dyn1 == global::haxe.lang.Runtime.undefined )) ? (((global::maglev.MagLevArray) (((object) (__fn_float1) )) )) : (((global::maglev.MagLevArray) (__fn_dyn1) )) );
				global::maglev.MagLevArray data = global::maglev.MagLevArray.create();
				#line 219 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("_not_implemented_"));
				data.push(global::maglev.MagLevString.fromString("ColorConverter.LoadReferenceColors"));
				#line 221 "/my-component/src/colorconverter/ColorConverter.hx"
				data.push(global::maglev.MagLevString.fromString("colorconverter"));
				this.bus.call("MindPowered.Telemetry.Send", data);
				#line 223 "/my-component/src/colorconverter/ColorConverter.hx"
				global::maglev.MagLevError err = global::maglev.MagLevError.create(-20000, "You are trying to use the \'ColorConverter.LoadReferenceColors\' method but it\'s not quite done yet. Please email support@mindpowered.dev to find out when it will be done.", data);
				global::maglev.MagLevResult result = global::maglev.MagLevResult.fromError(err);
				#line 225 "/my-component/src/colorconverter/ColorConverter.hx"
				return result;
			}
			#line default
		}
		
		
		public global::maglev.MagLev bus;
		
	}
}


